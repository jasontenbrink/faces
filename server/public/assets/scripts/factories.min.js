app.factory('ActiveMemberService', ['$http', '$q', function ($http, $q) {
  var publicApi = {
  setActiveMember: setActiveMember,
  getActiveMember: getActiveMember
  };

  var activeMember = {};

  function setActiveMember(member) {
    activeMember = member;
  }

  function getActiveMember (){
    return activeMember;
  }

  return publicApi;
}]);



//store all active user info here.  Will need a link to data factory.  Directory controller
//Will have to inject this as a dependancy as well.  Api calls will be familyData - get's the first names
// of each family member and picture of family.  call to get family member data - returns array
//with each family member in it.  Will include first and last name, email, some phone numbers,
//and some addresses. Family position?  Seems useful.  could just mark child and parent.  Don't worry about that
//for now.


app.factory('AddressService', ['$q', '$http', function ($q, $http) {
  var publicApi = {
    getPersonsAddresses: getPersonsAddresses,
    updateAddress: updateAddress,
    postAddress: postAddress,
    postPersonsAddress: postPersonsAddress,
    getFamilyMembersAddresses: getFamilyMembersAddresses,
    removeAddressesExistingInAnotherArray: removeAddressesExistingInAnotherArray
  };

  function getPersonsAddresses(params) {
    var searchParams = {params: params};
    return $http.get('/address/people_and_addresses', searchParams).then(function (response) {
      return response.data;
    });
  }

  function updateAddress(params) {
    return $http.put('/address', params).then(function (response) {
      return response;
    });
  }

  function postAddress(params) {
    //if (isAddressEmpty()) return $q.when('no address to save');

    return $http.post('/address', params).then(function (response) {
      return response;
    });
  }


//I think the current problem is hear.  remove pin: pin and make it just pin.
  function postPersonsAddress(pin, address_id) {
    return $http.post('/address/people_and_addresses', {pin: pin, address_id: address_id}).
    then(function (response) {
      console.log('addressService postPersonsAddress says, ', response);
      return response;
    });
  }

  function getFamilyMembersAddresses(person){
    //change person to an array
    var promises = [];
    for (var i=0; i < person.length; i++){
      console.log('getFamilyMembersAddresses person[i]', person[i]);
      promises.push($http.get('/data/individual', {params: person[i]}))
    }
    return $q.all(promises)
    .then(function(response){
      var addresses = [];

      //flatten addresses
      for (var i = 0; i < response.length; i++){
        addresses = addresses.concat(response[i].data.addresses);
      }

      //remove dupes
      for (var i=0; i < addresses.length; i++){
        for (var j=i; j < addresses.length; j++){
          if (addresses[i].address_id==addresses[j].address_id && i!=j){
            addresses.splice(j,1);
          }
        }
      }
      console.log('concat method', addresses); 
      return addresses;
    }).catch(function(response){
      console.log('err in addressService.getFamilyMembersAddresses', response);
    });
  }

  function removeAddressesExistingInAnotherArray(addresses, referenceAddresses){ //candidate for memoization
    return addresses.reduce(function (total, value){
        var isDuplicate = referenceAddresses.find(function (val){
            return value.address_id == val.address_id
        });
        isDuplicate ? null : total.push(value);
        return total;
    }, []);
  }

  return publicApi;

///////Private/////////////////
  function isAddressEmpty(address){
    var isEmpty = true;
    for (key in address){
      console.log('key is, ' + key + '. value is, ' + address[key])
      if (key !== 'pin'){
        if(address[key]){
          isEmpty = false;
          return isEmpty;
        }
      }
    }
    return isEmpty;
  }
}]);

app.factory("AuthenticationRedirectInjector", ['$location', function($location){
var authenticationRedirect = {
          responseError: function (response) {
            console.log('injector, response', response);
            if (response.status===401){
              $location.path('/login');
            }
          }
        };
return authenticationRedirect;
}]);

app.factory('DataService', ['$http', '$window', function ($http, $window) {
  var data;
  var individualData;
  var familyData;
  var activeMemberId;
  var activeFamilyId;

  var publicApi = {
    retrieveData: function (queryParams) {
      return getData(queryParams);
    },
    peopleData: function () {
      return data;
    },
    assignActiveFamilyIdApi: function (id) {
      return setActiveFamilyId(id);
    },
    assignActiveMemberId: function (id) {
      return setActiveMemberId(id);
    },
    retrieveActiveMemberId: function () {
      return getActiveMemberId();
    },
    retrieveActiveMember: function () {
      return getIndividualData(getActiveMemberId());
    },
    memberData: function () {
      return individualData;
    },
    retrieveFamilyData: function (id) {
      return getFamilyData(getActiveFamilyId());
    },
    familyData: function () {
      return familyData;
    }
  };

//getters
//======================================================

//getter for directory
  var getData = function (queryParams) {
  console.log('heading out from factory', queryParams);
  var promise = $http.get('/data',
    {params: queryParams}
  )
  .then(
    function (response) {
      console.log('response from server', response.data);
      data = response.data;
    }
  );
  return promise;
  };

//getter for individual data card
  var getIndividualData = function (id) {
  //  var member = getMember(id);
    var pinObject = {pin: id};

    console.log('heading out from factory on /data/individual: ', id);
    var promise = $http.get('/data/individual',
      {params: pinObject}
    )
    .then(
      function (response) {
        individualData = response.data;
      }
    );
    return promise;
  };

  function getActiveMemberId() {
    activeMemberId = activeMemberId || $window.sessionStorage.getItem('activeMemberId');
    return activeMemberId;
  }

//getter for family data card
  var getFamilyData = function (id) {
    var queryParams = {family_id: id};
    console.log('heading out from factory on /data/family.  family_id: ', queryParams );
    var promise = $http.get('/data/family',
      {params: queryParams}
    )
    .then(
      function (response) {
        console.log('response from server', response.data);
        familyData = response.data;
      }
    );
    return promise;
  };

  function getActiveFamilyId() {
    activeFamilyId = activeFamilyId || $window.sessionStorage.getItem('activeFamilyId');
    return activeFamilyId;
  }

//setters
  var setActiveMemberId = function (id) {
    console.log('from factory, setting member id to: ', id);
    activeMemberId = id;
    $window.sessionStorage.setItem('activeMemberId', activeMemberId);
  };

  var setActiveFamilyId =function (id) {
    console.log('from factory, setting family id to: ', id);
    activeFamilyId = id;
    $window.sessionStorage.setItem('activeFamilyId', activeFamilyId);
  };

//utility
  var getMember = function (id) {
    //$$hashKey is a problem.  Can't use it.  Have to refactor directory controller using DB pin.
    var member;
    console.log('in factory getMember, data is: ', data);
    console.log('in factory getMember, id is: ', id);
    for (var i = 0; i < data.length; i++) {
      if (data[i].pin === id){
        member = data[i];
        console.log('active memberId from factory', activeMemberId);
        return member;
      }
    }
  };

  return publicApi;
}]);

app.factory('FamilyService', ['$http', '$q', function ($http, $q) {
  var publicApi = {
  getFamilyIdByPin: getFamilyIdByPin,
  addToFamilyByPin: addToFamilyByPin,
  makeFamily: makeFamily,
  getMembersOfFamilies: getMembersOfFamilies
  };

  function getFamilyIdByPin(pin) {
    var params = {};
    params.pin = pin;
    console.log('getFamily pin param, ', params);
    return $http.get('/data/family/getFamilies', {params: params}).then(function (response) {
      console.log('family.get says: ', response.data);
      return response.data;
    });
  }

  function addToFamilyByPin(pin, familyId) {
    return $http.post('/data/family/addPeople', {pinArray: pin, familyId: familyId}).then(function (response) {
      console.log('familyService.addTFam says, ', response);
      return response.data;
    });
  }

  function makeFamily (people){
    return $http.post('/data/family', people).then(
      function(response){
        return response.data;
      }
    );
  }

  function getMembersOfFamilies(familyIds){
    var promises = [];
    angular.forEach(familyIds, function(familyId){
      promises.push($http.get('/data/family/getFamilyMembers', {params: familyId}));
    });
    return $q.all(promises)
    .then(function(response){
      return response[0].data;
    })
    .catch(function(err){
      console.log('getfam err', err)
    }); 
  }
  return publicApi;
}]);

app.factory('MemberService', ['$http',function ($http) {
  var publicApi = {
    updateMember: updateMember,
    postMember: postMember,
    getMembersByName: getMembersByName,
    getRegisteringMember: getRegisteringMember,
    setRegisteringMember: setRegisteringMember,
    deleteMember: deleteMember
  };

  var registeringMember = {};

  function updateMember(params) {
    return $http.put('/memberAdmin', params).then(function (response) {
      return response;
    });
  }

  function postMember(params) {
    return $http.post('/memberAdmin', params).then(function (response) {
      registeringMember = response.data;
      console.log('memberService registeringMember, ', registeringMember);
      return registeringMember;
    });
  }

  function getMembersByName(params) {
    return $http.get('/memberAdmin', params).then(function (response) {
      return response;
    });
  }

  function getRegisteringMember() {
    return registeringMember;
  }

  function deleteMember(id) {
    return $http.delete('/memberAdmin', {params:{id: id}}).then(function (response) {
      console.log('from delete member', response);
      return response.data[0][0].pin;
    });
  }

  function setRegisteringMember(member) {
    registeringMember = member;
    return registeringMember;
  }
  return publicApi;
}]);
