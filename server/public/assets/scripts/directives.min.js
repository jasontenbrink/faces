app.directive('addAddressFromFamily', ['AddressService', 'MemberService', 'FamilyService',
function(AddressService, MemberService, FamilyService){
  return {
    restrict: "E",
    scope: {
      nextPage: "&",
      reload: "&",
      families: "="
    },
    templateUrl: 'assets/views/directives/add-address-from-family.html',
    link: function (scope) {
      //use that to get pins of family members and get their addresses
        //in progress.  have a call in familyService set up, but I need to make sure the service works


      //display those addresses
      //make those addresses buttons.
      //If an address is clicked, do a confirmation box, then write the address to the DB, call nextPage()
      //have a create new address button.  This will call nextPage().

      var addressService = AddressService;
      var memberService = MemberService,
          familyService = FamilyService;

      var tempAddress = Object.assign({}, scope.address);
      console.log('address obj: ', scope.address);

      scope.submitRegistration = function (form) {
        if (form.$valid){
          if(scope.addressExists){
            console.log('working');
            addressService.updateAddress(scope.address).then(
              function (response) {
                scope.isDisabled = !scope.isDisabled;
              });
          }
          else{
            scope.address.pin = memberService.getRegisteringMember().pin;

            //addressService should return a resolved promise if there is no payload on scope.address
            addressService.postAddress(scope.address).then(
              function (response) {
                console.log('success from address service', response);
                scope.nextPage();
              });
          }
        }
      };

      scope.cancel = function(){
        if(scope.addressExists){
          Object.assign(scope.address, tempAddress);
          scope.isDisabled = !scope.isDisabled;
        }
        else{
          scope.nextPage();
        }
      };

      scope.skipAddress = function(){
        scope.nextPage();
      }
    }
  };
}]);

//I think this directive is depricated

app.directive('createFamily', ['AddressService', function(AddressService){
  return {
    restrict: "E",
    scope: {
      address: '='
    },
    templateUrl: 'assets/views/directives/create-family.html',
    controller: 'CreateFamilyController',
    link: function (scope) {
      // var addressService = AddressService;
      // var tempAddress = Object.assign({}, scope.address);
      // console.log('address obj: ', scope.address);
      // scope.isDisabled = true;
      //
      // scope.submitRegistration = function (form) {
      //   if (form.$valid){
      //     addressService.updateAddress(scope.address).then(
      //       function (response) {
      //         scope.isDisabled = !scope.isDisabled;
      //       });
      //   }
      // };
      //
      // scope.cancel = function(){
      //   Object.assign(scope.address, tempAddress);
      //   scope.isDisabled = !scope.isDisabled;
      // };
    }
  };
}]);

app.directive('displayMember',['uiGridConstants',
  function () {
    return {
      restrict: 'E',
      scope: {
        gridOptions: '=',
        data: '='
      },
      templateUrl: 'assets/views/directives/display-members.html'
    };
  }
]);

app.directive('editableAddress', ['AddressService', 'MemberService', function(AddressService, MemberService){
  return {
    restrict: "E",
    scope: {
      address: '=',
      isDisabled: '=',
      addressExists: '=',
      nextPage: "&"
    },
    templateUrl: 'assets/views/directives/editable-address.html',
    link: function (scope) {
      var addressService = AddressService;
      var memberService = MemberService;
      var tempAddress = Object.assign({}, scope.address);
      console.log('address obj: ', scope.address);

      scope.submitRegistration = function (form) {
        if (form.$valid){
          if(scope.addressExists){
            console.log('working');
            addressService.updateAddress(scope.address).then(
              function (response) {
                scope.isDisabled = !scope.isDisabled;
              });
          }
          else{
            scope.address.pin = memberService.getRegisteringMember().pin;

            //addressService should return a resolved promise if there is no payload on scope.address
            addressService.postAddress(scope.address).then(
              function (response) {
                console.log('success from address service', response);
                scope.nextPage();
              });
          }
        }
      };

      scope.cancel = function(){
        if(scope.addressExists){
          Object.assign(scope.address, tempAddress);
          scope.isDisabled = !scope.isDisabled;
        }
        else{
          scope.nextPage();
        }
      };

      scope.skipAddress = function(){
        scope.nextPage();
      }
    }
  };
}]);

//trying to create a family in the case where selected person isn't already part of a family
//also trying to get the dataArray to repopulate when you add a new member.  Maybe just do it as the last
//thing on add to family. Or wrap the goToNext function and repop dataArray there.

app.directive('joinFamily', ['$http', 'MemberService', 'FamilyService', 'AddressService',
function ($http, MemberService, FamilyService, AddressService) {
  return {
    restrict: "E",
    scope: {
      nextPage: "&",
    },
    templateUrl: 'assets/views/directives/join-family.html',
    link: link
  };
  function link(scope){
    var memberService = MemberService;
    var familyService = FamilyService;
    var addressService = AddressService;

    activate();

    function activate(){
      var suggestionArray = [];
      var dataArray = [];
      scope.people = [];
      scope.familyIsAdded = false;
      scope.familyMembersAddressDoesNotExist = false;
      scope.familyIsAdded = false;
      scope.addressIsAdded = false;
      getAllMembers();
    }

    scope.nextPageWrapper = function(){
      activate();
      scope.nextPage();
    };

    function getAllMembers(){
    memberService.getMembersByName().then(function(response){
      dataArray = response.data.sort(compare); //alphabetize

    });
  }

    //add registering member to selected member's family
    scope.addToFamily = function(){
        console.log('selectedPerson', scope.selectedPerson);
      scope.registeringMember = memberService.getRegisteringMember();
      console.log('registeringMember, ', scope.registeringMember);

      //get persons family id
      familyService.getFamilyIdByPin(scope.selectedPerson.pin).then(function (response) {
        var registeringMemberPin = [ //endpoint expects array of objects with property 'pin'
            {pin: scope.registeringMember.pin}
          ];

        //if member has no family make a family of one
        if (response.length < 1){
          familyService.makeFamily([scope.selectedPerson, scope.registeringMember]).then(
            function(family){
              console.log('family', family);
              scope.familyIsAdded = true;
            }
          )
        }
        else{
          //TODO, create modal where registering member can choose which family if scope.selectedPerson has more than 1
          familyService.addToFamilyByPin(registeringMemberPin, response[0].family_id).then(
            function (res) {
              console.log(res);
              scope.familyIsAdded = true;
            }
          );
        }


      });
    };

    //add selected persons address to registering members address
    scope.addAddress = function () {
      //this directive loads when the admin view loads, so no registeringMember yet
      //better choice is to use routing for this register member wizard.
      var registeringMember = MemberService.getRegisteringMember();
      if(!scope.selectedPerson) return console.log('no selected person');

      addressService.getPersonsAddresses(scope.selectedPerson).then(function (response) {
        console.log('joinFamilyDirective from getPersonsAddresses', response[0]);
        if (response[0]){
          addressService.postPersonsAddress(registeringMember.pin, response[0].address_id).
            then(function (res) {
              scope.addressIsAdded = true;
              scope.nextPage();
              scope.nextPage();
              console.log(res);
              return res;
            });
        } else{
          scope.familyMembersAddressDoesNotExist = true;
        }
      });
    };

    scope.updateSearch = function () {
      if (scope.searchText.length > 0){
        suggestionArray = [];
        scope.people = [];
        for (var i = 0; i < dataArray.length; i++) {
          if( angular.lowercase(dataArray[i].last_name).indexOf(angular.lowercase(scope.searchText)) === 0){
            suggestionArray.push(dataArray[i]);
          }
          if (suggestionArray.length === 5) {
              break;
            }
        }
        if (suggestionArray.length > 0) {
          scope.people = suggestionArray;
          console.log('s', scope.people);
        }
      }
    };

    function compare(a,b) {
      if (a.last_name < b.last_name)
        return -1;
      else if (a.last_name > b.last_name)
        return 1;
      else
        return 0;
    }
  }
}]);

app.directive('profile', ['MemberService', function(MemberService){
  return {
    restrict: "E",
    scope: {
      user: '='
    },
    templateUrl: 'assets/views/directives/profile.html',
    link: function (scope) {
      var memberService = MemberService;
      var tempUser = Object.assign({}, scope.user);
      scope.isDisabled = true;
      scope.submitRegistration = function (form) {
        if (form.$valid){
          memberService.updateMember(scope.user).then(
            function (response) {
              scope.isDisabled = !scope.isDisabled;
              console.log(tempUser.age);
            });
        }
      };

      scope.cancel = function(){
        Object.assign(scope.user, tempUser);
        scope.isDisabled = !scope.isDisabled;
      };
    }
  };
}]);

app.directive('registration', ['$http', 'MemberService', function ($http, MemberService) {
  return {
    restrict: "E",
    scope: {
      nextPage: "&"
    },
    templateUrl: 'assets/views/directives/registration.html',
    link: link
  };
  function link(scope){
    var memberService = MemberService;
    scope.user = {email:"",
                  firstName:"",
                  lastName: "",
                  gender: "",
                  age: "",
                  electronic_newsletter: 'true'
                };
    scope.submitRegistration = function (form) {
      if (form.$valid) {
        memberService.postMember(scope.user).then(function (response) {
            scope.nextPage();
            scope.user = {};
            scope.submitForm.$setPristine(); //this isn't working 
            console.log('$setPristine should hav happened');
        });

      }
    };
  }
}]);

app.directive('searchForPeople',['DataService',
  function (DataService) {
    return {
      restrict: 'E',
      scope: {
        searchResult: '='
      },
      templateUrl: 'assets/views/directives/search-for-people.html',
      link: function (scope, elements, attrs, controllers) {
        scope.searchResult = [];
        scope.searchObject = new SearchObject();
        scope.initialShow = true;
        scope.onOrOff = false;

        scope.toggle = function () {
          scope.onOrOff = !scope.onOrOff;
          scope.initialShow = false;
        };

        var dataService = DataService;

        scope.fetchData = function(searchObject) {
          dataService.retrieveData(searchObject)
            .then(function () {
              scope.searchResult = dataService.peopleData();
            });
            scope.toggle();
        };
        function SearchObject() {
          this.first_name='';
          this.last_name='';
          this.email='';
          this.phone='';
        }
        scope.fetchData(new SearchObject());
      }
    };
  }
]);
