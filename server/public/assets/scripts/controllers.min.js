app.controller('AdminController', ['$scope', function($scope){
  var wizardArray = ['profilePage', 'joinFamilyPage', 'addressPage', 'registrationFinished'];
  var activeIndex = 0;
  $scope.activePage = wizardArray[activeIndex];
  $scope.nextPage = function () {
    if (activeIndex < 3) activeIndex++;
    else activeIndex = 0;
      //this isn't ideal.  Want to indicate that registration is complete and
      //member is saved and return to blank registration page
    $scope.activePage = wizardArray[activeIndex];
  };
  console.log('AdminController');
}]);

/*
to do: autoselect folks in the directory that are already in the family
deselect from directory if someone is removed from family using righthand pane
*/

app.controller('CreateFamilyController', ['$scope', 'uiGridConstants', '$http',
function ($scope, uiGridConstants, $http) {
  var searchResults;
  $scope.people = [];

   $scope.createFamily = function () {
     var updateObject =  $scope.people;
     $http.post('/data/family', updateObject).
       then(function (response) {
         console.log('response after making a family: ', response.data);
       });
   };

   //functions and options required for ui-grid/individual directory
   $scope.gridOptions = {
     columnDefs: [
            { field: 'first_name',
              sort: {
                direction: uiGridConstants.ASC,
                priority: 1
              }
            },
            { field: 'last_name',
               sort: {direction: uiGridConstants.ASC, priority: 2}},
            { field: 'email'},
            { field: 'phone'},
            {field: 'pin', visible: false}
          ],
     enableFullRowSelection: true
   };

   $scope.gridOptions.onRegisterApi = function(gridApi){
   //set gridApi on scope
   $scope.gridApi = gridApi;
   gridApi.selection.on.rowSelectionChanged($scope,function(row){
       var msg = 'row selected ' + row.isSelected;
       console.log('object to be inserted into the family: ',row.entity);
       if (row.isSelected && !(isInFamily($scope.people, row.entity.pin)) ){
         $scope.people.push(row.entity);
       }else{
         $scope.removeFromFamily(row.entity.pin);
       }
       //todo if person is no longer in family array, deselect on the grid
       console.log(msg);
     });
   };

   //other helper functions
   $scope.removeFromFamily = function (pin) {
     for (var i = 0; i < $scope.people.length; i++) {
       if ($scope.people[i].pin === pin){
         $scope.people.splice(i,1);
       }
     }
   };

   function isInFamily(array, dbId) {
     for (var i = 0; i < array.length; i++) {
       if (array[i].pin === dbId) return true;
     }
     return false;
   }
}]);

app.controller('DirectoryController',['$scope', 'DataService', 'uiGridConstants','$timeout', '$mdDialog', 'MemberService',
function ($scope, DataService, uiGridConstants, $timeout, $mdDialog, MemberService) {
console.log('hi from DirectoryController');
  var dataService = DataService;
  var memberService = MemberService; //I got sick of using dataService because it is too bulky

  $scope.sendSelectedMemberInfo = function(id) {
    console.log('this is the grid id', id);
    dataService.assignActiveMemberId(id);
  };

  $scope.deleteMember = function (id) {
    alert ("are you sure you want to delete " + id);
    memberService.deleteMember(id);
  };

  $scope.gridOptions = {
    columnDefs: [
           { field: 'first_name',
             displayName: 'First Name',
             cellTemplate: '<a ng-click="grid.appScope.sendSelectedMemberInfo(row.entity.pin)" ' +
             'href="#/individualDatacard">{{COL_FIELD}}</a>',
             enableCellEdit: true,
             sort: {
               direction: uiGridConstants.ASC,
               priority: 1
             }
           },
           { field: 'last_name',
             displayName: 'Last Name',
              sort: {direction: uiGridConstants.ASC, priority: 2}
           },
           { field: 'email',
             displayName: 'Email',
           },
           { field: 'gender',
             displayName: 'Gender',
            //  editableCellTemplate: 'ui-grid/dropDownEditor',
            //  editDropDownValueLabel: 'gender',
            //  editDropDownOptionsArray: [
            //    {id: 1, gender: 'male'},
            //    {id: 2, gender: 'female'}
            //  ],
             enableCellEdit: true,
             visible: true
           },
           { field: 'age',
             displayName: 'Age',
             visible: false
           },
           { field: 'electronic_newsletter',
             displayName: 'Electronic Newsletter',
             type: 'boolean'
           },
           { field: 'primary_phone_number',
             displayName: '1st Phone Number'
           },
           { field: 'secondary_phone_number',
             displayName: '2nd Phone Number'
           },
           { field: 'admin_notes',
             displayName: 'Administrator Notes',
             cellTooltip: true,
             visible: true
           },
           { field: 'delete button',
             displayName: ' ',
             cellTemplate: '<i ng-click="grid.appScope.deleteMember(row.entity.pin)" class="material-icons" style="color: rgb(104, 152, 233)">delete</i>',
             visible: true
           },
           {field: 'pin', visible: false} //pin needs to be last
         ],
    enableFullRowSelection: true,
    onRegisterApi: function(gridApi){
      $scope.gridApi = gridApi;
      gridApi.edit.on.afterCellEdit($scope, function(rowEntity, colDef, newValue, oldValue){
            console.log('rowEntity', rowEntity.pin, colDef.field, rowEntity.gender);
            memberService.updateMember({
              pin: rowEntity.pin,
              last_name: rowEntity.last_name,
              first_name: rowEntity.first_name,
              electronic_newsletter: rowEntity.electronic_newsletter,
              gender: rowEntity.gender,
              admin_notes: rowEntity.admin_notes,
              age: rowEntity.age,
              email: rowEntity.email,
              primary_phone_number: rowEntity.primary_phone_number,
              secondary_phone_number: rowEntity.secondary_phone_number
            }).then (function(response){
              console.log(response);
            });
          });
    }
  };

  //sets default display values
  $scope.isActive = [true, true, true, true, false, true, true, true, true, false];

  //show or hide columns in the ui grid
  $scope.toggleVisible = function (colNumber) {
    $scope.gridOptions.columnDefs[colNumber].visible = !$scope.isActive[colNumber];
    $scope.gridApi.core.notifyDataChange(uiGridConstants.dataChange.COLUMN);
  };

//modal for choosing which columns to hide
  $scope.openDialogue = function ($event) {
    var parentEl = angular.element(document.body);
    console.log('parentEl', angular.element(document));
    $mdDialog.show({
      parent: parentEl,
      targetEvent: $event,
      scope: $scope,
      clickOutsideToClose: true,
      preserveScope: true,
      templateUrl: 'assets/views/directives/column-options-modal.html'
    });
  };

//export to csv
  $scope.export = function () {
    console.log('csv export button was hit');
    $scope.gridApi.exporter.csvExport( 'visible', 'visible');
  };

//I think I put this in to automatically trigger a click when I was debugging
    // $timeout(function () {
    //    angular.element(document).find('nav').triggerHandler('click');
    // }, 0);
}]);

/*
to do: autoselect folks in the directory that are already in the family
deselect from directory if someone is removed from family using righthand pane
*/

app.controller('EditFamilyController', ['$scope', 'DataService', 'uiGridConstants', '$timeout', '$http',
function ($scope, DataService, uiGridConstants, $timeout, $http) {
  $scope.searchObject = new SearchObject();
  var searchResults;
  var dataService = DataService;
  var family = [];

  //get active family data
  if (dataService.familyData() === undefined){
    dataService.retrieveFamilyData().then(function (response) {
      $scope.family = dataService.familyData().family;
      $scope.people = dataService.familyData().people;
    });
  } else{
    console.log('dataService.familyData', dataService.familyData());
      $scope.family = dataService.familyData().family;
      $scope.people = dataService.familyData().people;
      console.log('resulting people in family from db, ', $scope.people);
      console.log('what is in the family object? ', $scope.family);
   }

   $scope.updateFamily = function () {
     var updateObject = {people: $scope.people,
                          family: $scope.family
                        };
     $http.post('/data/family/update', updateObject).
       then(function (response) {
         console.log('response after making a family: ', response.data);
       });
   };

   //functions and options required for ui-grid/individual directory
   $scope.gridOptions = {
     columnDefs: [
            { field: 'first_name',
              sort: {
                direction: uiGridConstants.ASC,
                priority: 1
              }
            },
            { field: 'last_name',
               sort: {direction: uiGridConstants.ASC, priority: 2}},
            { field: 'email'},
            { field: 'phone'},
            {field: 'pin', visible: false}
          ],
     enableFullRowSelection: true
   };



   $scope.gridOptions.onRegisterApi = function(gridApi){
   //set gridApi on scope
   $scope.gridApi = gridApi;
   gridApi.selection.on.rowSelectionChanged($scope,function(row){
       var msg = 'row selected ' + row.isSelected;
       console.log('object to be inserted into the family: ',row.entity);
       if (row.isSelected && !(isInFamily($scope.people, row.entity.pin)) ){
         $scope.people.push(row.entity);
       }else{
         $scope.removeFromFamily(row.entity.pin);
       }
       //todo if person is no longer in family array, deselect on the grid
       console.log(msg);
     });
   };

   $scope.getQuery = function () {
         console.log('heading out from controller', $scope.searchObject);
       //  if (dataService.peopleData() === undefined){
           dataService.retrieveData($scope.searchObject)
           .then(function () {
             $scope.searchResults = dataService.peopleData();
             $scope.gridOptions.data = $scope.searchResults;
           });
       //  }
         // else{
         //   $scope.searchResults = dataService.peopleData();
         // }
     };

   //other helper functions
   $scope.removeFromFamily = function (pin) {
     for (var i = 0; i < $scope.people.length; i++) {
       if ($scope.people[i].pin === pin){
         $scope.people.splice(i,1);
       }
     }
   };

   $timeout(function () {
      angular.element(document).find('nav').triggerHandler('click');
   }, 0);

}]);

function SearchObject() {
  this.first_name='';
  this.last_name='';
  this.email='';
  this.phone='';
}

function isInFamily(array, dbId) {
  for (var i = 0; i < array.length; i++) {
    if (array[i].pin === dbId) return true;
  }
  return false;
}

app.controller('FamilyDatacardController', ['$scope', 'DataService',
function ($scope, DataService) {
  var searchResults;
  var dataService = DataService;

  $scope.updateActiveMemberId = function (id) {
    console.log('from familyDC, set active memberID to:', id);
   dataService.assignActiveMemberId(id);
  };

  dataService.retrieveFamilyData()
   .then(function () {
        $scope.family = dataService.familyData().family;
        $scope.people = dataService.familyData().people;
        console.log('resulting people in family from db, ', $scope.people);
   });




}]);

app.controller('HomeController',['$scope', function ($scope) {
  console.log('hi, for HomeController');

}]);

var x = 'gulp test';

app.controller('IndividualDatacardController', ['$scope', 'DataService', 'MemberService',
function ($scope, DataService, MemberService) {
  $scope.x = 'hi!';
  $scope.columnWidth = 20;
  $scope.columnSpacing = '3';
  $scope.addNewAddress = true;
  var dataService = DataService;
  var memberService = MemberService;
  var data;
  dataService.retrieveActiveMember()
  .then(function () {
      data =  dataService.memberData();
      $scope.member = dataService.memberData().individual;
      $scope.addresses = dataService.memberData().addresses;
      $scope.families = dataService.memberData().families;
      memberService.setRegisteringMember($scope.member); //eventually move away from dataService to memberService
    });

    $scope.updateActiveFamilyId = function (id) {
      dataService.assignActiveFamilyIdApi(id);
    };


    $scope.data = {
        selectedIndex: 0,
    };
    $scope.next = function() {
        $scope.data.selectedIndex = Math.min($scope.data.selectedIndex + 1, 2) ;
    };
    $scope.previous = function() {
        $scope.data.selectedIndex = Math.max($scope.data.selectedIndex - 1, 0);
    };

}]);

app.controller('LoginController',['$scope', '$http', '$location',
  function ($scope, $http, $location) {
  console.log('hi, from Login Controller');

  $scope.user = {};
  $scope.submitCredentials = function () {
    console.log('data sent to server', $scope.user);
    $http.post('/login', $scope.user)
      .then(function (response) {
        //console.log('is this html?', response.data);
        console.log('response is', response);
        //console.log('response status', response.status);
        if (response.status===200){
          $location.path('/directory');
        }
        else{
          // $location.path('/failure');
          alert('sign in failed');
        }

      });
  };

}]);

app.controller('MakeFamiliesController',
  ['$scope', 'DataService', 'uiGridConstants','$timeout', '$http',
function ($scope, DataService, uiGridConstants, $timeout, $http) {

  $scope.searchObject = new SearchObject();
  $scope.searchResults = [];
  $scope.family = [];
  var dataService = DataService;

  $scope.sendSelectedMemberInfo = function(id) {
    console.log('MAKE FAMILIES!!!!   this is the grid id', id);
    dataService.assignActiveMemberId(id);
  };

  $scope.gridOptions = {
    columnDefs: [
           { field: 'first_name',
             cellTemplate: '<a ng-click="grid.appScope.sendSelectedMemberInfo(row.entity.pin)" ' +
             'href="#/individualDatacard">{{COL_FIELD}}</a>',
             sort: {
               direction: uiGridConstants.ASC,
               priority: 1
             }
           },
           { field: 'last_name',
              sort: {direction: uiGridConstants.ASC, priority: 2}},
           { field: 'email'},
           { field: 'phone'},
           {field: 'pin', visible: false}
         ],
    enableFullRowSelection: true
  };

  $scope.gridOptions.onRegisterApi = function(gridApi){
  //set gridApi on scope
  $scope.gridApi = gridApi;
  gridApi.selection.on.rowSelectionChanged($scope,function(row){
      var msg = 'row selected ' + row.isSelected;
      console.log(row.entity);
      if (row.isSelected){
        $scope.family.push(row.entity);
      }else{
        $scope.removeFromFamily(row.entity.pin);
      }
      //todo if person is no longer in family array, deselect on the grid
      console.log(msg);
    });
  };

  $scope.removeFromFamily = function (pin) {
    for (var i = 0; i < $scope.family.length; i++) {
      if ($scope.family[i].pin === pin){
        $scope.family.splice(i,1);
      }
    }
  };

  $scope.getQuery = function () {
        console.log('heading out from controller', $scope.searchObject);
      //  if (dataService.peopleData() === undefined){
          dataService.retrieveData($scope.searchObject)
          .then(function () {
            $scope.searchResults = dataService.peopleData();
            $scope.gridOptions.data = $scope.searchResults;
          });
      //  }
        // else{
        //   $scope.searchResults = dataService.peopleData();
        // }
    };

    $scope.makeFamily = function () {
      $http.post('/data/family', $scope.family).
        then(function (response) {
          console.log('response after making a family: ', response.data);
        });
    };
    $timeout(function () {
       angular.element(document).find('nav').triggerHandler('click');
    }, 0);
}]);

function SearchObject() {
  this.first_name='';
  this.last_name='';
  this.email='';
  this.phone='';
}

app.controller('NavController',['$scope', '$http', '$location',
  function ($scope, $http, $location) {
    $scope.logout = function () {
      console.log('logout button');
      $http.get('/logout').then(function (response) {
        console.log('logout response', response);
        $location.path('/login');
      });
    };

  }]);

app.controller('RegisterController',['$scope', '$http', '$location',
  function ($scope, $http, $location) {
  console.log('hi, from UserRegistrationController');
  $scope.user={};

  $scope.submitRegistration = function () {
    console.log('data sent to server', $scope.user);
    $http.post('/register', $scope.user)
      .then(function (response) {
        //console.log('is this html?', response.data);
        console.log('response is', response);
        if (response.status===200){
          $location.path('/login');
        }

      });
  };


}]);
